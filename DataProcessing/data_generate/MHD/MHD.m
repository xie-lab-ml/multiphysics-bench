function out = MHD_v1(parm)

parm_NN=parm.NN;

parm_Br_A=parm.Br_A;
parm_Br_x0=parm.Br_x0;
parm_Br_y0=parm.Br_y0;
parm_Br_sigma=parm.Br_sigma;


%
% MHD_v1.m
%
% Model exported on Mar 27 2025, 01:55 by COMSOL 6.2.0.290.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('E:\DATA\MHD');

model.component.create('comp1', true);

model.component('comp1').geom.create('geom1', 3);

model.component('comp1').mesh.create('mesh1');

model.component('comp1').physics.create('mef', 'ElectricInductionCurrents', 'geom1');
model.component('comp1').physics.create('spf', 'LaminarFlow', 'geom1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/mef', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);

model.param.set('Length', '8[cm]');
model.param.descr('Length', '');
model.param.set('Width', '2.75[cm]');
model.param.descr('Width', '');
model.param.set('Height', '1[cm]');
model.param.descr('Height', '');
model.param.set('Thickness', '2[mm]');
model.param.descr('Thickness', '');
model.param.set('Magnet_Radius', '1.5[cm]');
model.param.descr('Magnet_Radius', '');
model.param.set('Magnet_Height', '0.75[cm]');
model.param.descr('Magnet_Height', '');
model.param.set('DomainDepth', '8[cm]');
model.param.descr('DomainDepth', '');
model.param.set('DomainHeight', '8[cm]');
model.param.descr('DomainHeight', '');
model.param.set('sigma', parm_Br_sigma);
model.param.descr('sigma', '');
model.param.set('x0', parm_Br_x0);
model.param.descr('x0', '');
model.param.set('y0', parm_Br_y0);
model.param.descr('y0', '');
model.param.set('A', parm_Br_A);
model.param.descr('A', '');

model.component('comp1').geom('geom1').lengthUnit('cm');
model.component('comp1').geom('geom1').create('blk1', 'Block');
model.component('comp1').geom('geom1').feature('blk1').set('size', {'Length' 'Width' '1'});
model.component('comp1').geom('geom1').feature('blk1').setIndex('size', 'Height', 2);
model.component('comp1').geom('geom1').feature('blk1').set('base', 'center');
model.component('comp1').geom('geom1').run('blk1');
model.component('comp1').geom('geom1').create('cyl1', 'Cylinder');
model.component('comp1').geom('geom1').feature('cyl1').set('r', 'Magnet_Radius');
model.component('comp1').geom('geom1').feature('cyl1').set('h', 'Magnet_Height');
model.component('comp1').geom('geom1').feature('cyl1').set('pos', {'0' '0' 'Height/2+Thickness'});
model.component('comp1').geom('geom1').run('cyl1');
model.component('comp1').geom('geom1').create('blk2', 'Block');
model.component('comp1').geom('geom1').feature('blk2').set('size', {'Length' 'DomainDepth' '1'});
model.component('comp1').geom('geom1').feature('blk2').setIndex('size', 'DomainHeight', 2);
model.component('comp1').geom('geom1').feature('blk2').set('base', 'center');
model.component('comp1').geom('geom1').run('blk2');
model.component('comp1').geom('geom1').create('mir1', 'Mirror');
model.component('comp1').geom('geom1').feature('mir1').selection('input').set({'cyl1'});
model.component('comp1').geom('geom1').feature('mir1').set('keep', true);
model.component('comp1').geom('geom1').run('mir1');
model.component('comp1').geom('geom1').create('cyl2', 'Cylinder');
model.component('comp1').geom('geom1').feature('cyl2').set('r', 'Height/3');
model.component('comp1').geom('geom1').feature('cyl2').set('h', '(DomainDepth-Width)/2');
model.component('comp1').geom('geom1').feature('cyl2').set('pos', {'0' 'Width/2' '0'});
model.component('comp1').geom('geom1').feature('cyl2').set('axistype', 'y');
model.component('comp1').geom('geom1').run('cyl2');
model.component('comp1').geom('geom1').create('mir2', 'Mirror');
model.component('comp1').geom('geom1').feature('mir2').selection('input').set({'cyl2'});
model.component('comp1').geom('geom1').feature('mir2').set('keep', true);
model.component('comp1').geom('geom1').feature('mir2').set('axis', [0 1 0]);
model.component('comp1').geom('geom1').run('mir2');
model.component('comp1').geom('geom1').create('wp1', 'WorkPlane');
model.component('comp1').geom('geom1').feature('wp1').set('unite', true);
model.component('comp1').geom('geom1').run('wp1');
model.component('comp1').geom('geom1').create('par1', 'Partition');
model.component('comp1').geom('geom1').feature('par1').selection('input').set({'blk1' 'blk2' 'cyl1' 'cyl2' 'mir1' 'mir2'});
model.component('comp1').geom('geom1').feature('par1').set('partitionwith', 'workplane');
model.component('comp1').geom('geom1').run('par1');
model.component('comp1').geom('geom1').create('del1', 'Delete');
model.component('comp1').geom('geom1').feature('del1').selection('input').init(3);
model.component('comp1').geom('geom1').feature('del1').selection('input').set('par1(6)', 1);
model.component('comp1').geom('geom1').feature('del1').selection('input').set('par1(1)', 1);
model.component('comp1').geom('geom1').feature('del1').selection('input').set('par1(4)', 1);
model.component('comp1').geom('geom1').feature('del1').selection('input').set('par1(5)', 1);
model.component('comp1').geom('geom1').feature('del1').selection('input').set('par1(2)', 1);
model.component('comp1').geom('geom1').run('fin');

model.component('comp1').material.create('mat1', 'Common');
model.component('comp1').material('mat1').label('Free Space');
model.component('comp1').material('mat1').propertyGroup('def').set('relpermeability', {'1'});
model.component('comp1').material('mat1').propertyGroup('def').set('electricconductivity', {'0'});
model.component('comp1').material('mat1').propertyGroup('def').set('relpermittivity', {'0'});
model.component('comp1').material.create('mat2', 'Common');
model.component('comp1').material('mat2').label('Fluid');
model.component('comp1').material('mat2').selection.set([2]);
model.component('comp1').material('mat2').propertyGroup('def').set('relpermeability', {'1'});
model.component('comp1').material('mat2').propertyGroup('def').set('electricconductivity', {'10'});
model.component('comp1').material('mat2').propertyGroup('def').set('relpermittivity', {'80'});
model.component('comp1').material('mat2').propertyGroup('def').set('density', {'1000'});
model.component('comp1').material('mat2').propertyGroup('def').set('dynamicviscosity', {'0.001'});
model.component('comp1').material.create('mat3', 'Common');
model.component('comp1').material('mat3').label('Magnet');
model.component('comp1').material('mat3').selection.set([3]);
model.component('comp1').material('mat3').propertyGroup('def').set('relpermeability', {'1.05'});
model.component('comp1').material('mat3').propertyGroup('def').set('electricconductivity', {'0'});
model.component('comp1').material('mat3').propertyGroup('def').set('relpermittivity', {'1'});
model.component('comp1').material.create('mat4', 'Common');
model.component('comp1').material('mat4').label('Conductor');
model.component('comp1').material('mat4').selection.set([4 5]);
model.component('comp1').material('mat4').propertyGroup('def').set('relpermeability', {'1'});
model.component('comp1').material('mat4').propertyGroup('def').set('electricconductivity', {'6e7'});
model.component('comp1').material('mat4').propertyGroup('def').set('relpermittivity', {'1'});

model.component('comp1').physics('mef').feature('mi1').create('ein1', 'ElectricInsulation', 2);
model.component('comp1').physics('mef').feature('mi1').feature('ein1').selection.set([5 31]);
model.component('comp1').physics('mef').feature('mi1').create('gnd2', 'Ground', 2);
model.component('comp1').physics('mef').feature('mi1').feature('gnd2').selection.set([23]);
model.component('comp1').physics('mef').feature('mi1').create('term1', 'Terminal', 2);
model.component('comp1').physics('mef').feature('mi1').feature('term1').selection.set([18]);
model.component('comp1').physics('mef').feature('mi1').feature('term1').set('TerminalType', 'Voltage');
model.component('comp1').physics('mef').feature('mi1').feature('term1').set('V0', 0.1);
model.component('comp1').physics('mef').create('al1', 'AmperesLaw', 3);
model.component('comp1').physics('mef').feature('al1').selection.set([3]);
model.component('comp1').physics('mef').feature('al1').set('ConstitutiveRelationBH', 'RemanentFluxDensity');
model.component('comp1').physics('mef').feature('al1').set('normBr_crel_BH_RemanentFluxDensity_mat', 'userdef');
model.component('comp1').physics('mef').feature('al1').set('normBr_crel_BH_RemanentFluxDensity', 'A*exp(-((x-x0)^2 + (y-y0)^2)[1/cm^2]/(2*sigma^2))');
model.component('comp1').physics('mef').feature('al1').set('e_crel_BH_RemanentFluxDensity', [0 0 1]);
model.component('comp1').physics('mef').create('al2', 'AmperesLaw', 3);
model.component('comp1').physics('mef').feature('al2').selection.set([1]);
model.component('comp1').physics('mef').create('pmc1', 'PerfectMagneticConductor', 2);
model.component('comp1').physics('mef').feature('pmc1').selection.set([3 7 10 17 21 28 29]);
model.component('comp1').physics('mef').create('vlt1', 'Velocity', 3);
model.component('comp1').physics('mef').feature('vlt1').selection.set([2]);
model.component('comp1').physics('mef').feature('vlt1').set('v_src', 'root.comp1.u');
model.component('comp1').physics('spf').selection.set([2]);
model.component('comp1').physics('spf').create('sym1', 'Symmetry', 2);
model.component('comp1').physics('spf').feature('sym1').selection.set([7]);
model.component('comp1').physics('spf').create('open1', 'OpenBoundary', 2);
model.component('comp1').physics('spf').feature('open1').selection.set([5 31]);
model.component('comp1').physics('spf').create('vf1', 'VolumeForce', 3);
model.component('comp1').physics('spf').feature('vf1').set('F', {'mef.Jy*mef.Bz-mef.Jz*mef.By' 'mef.Jz*mef.Bx-mef.Jx*mef.Bz' 'mef.Jx*mef.By-mef.Jy*mef.Bx'});
model.component('comp1').physics('spf').feature('vf1').selection.set([2]);
model.component('comp1').physics('spf').prop('ShapeProperty').set('order_fluid', 4);

model.sol.create('sol1');

model.component('comp1').mesh('mesh1').stat.selection.geom(3);
model.component('comp1').mesh('mesh1').stat.selection.set([2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_A' 'comp1_V'});
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'fgmres');
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 10000);
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('kp1', 'KrylovPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('prefun', 'gmres');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('iterm', 'itertol');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').set('iter', '25');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('kp1').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label([native2unicode(hex2dec({'78' 'c1'}), 'unicode')  native2unicode(hex2dec({'57' '3a'}), 'unicode')  native2unicode(hex2dec({'54' '8c'}), 'unicode')  native2unicode(hex2dec({'75' '35'}), 'unicode')  native2unicode(hex2dec({'57' '3a'}), 'unicode') ]);
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label([native2unicode(hex2dec({'76' 'f4'}), 'unicode')  native2unicode(hex2dec({'63' 'a5'}), 'unicode')  native2unicode(hex2dec({'ff' '0c'}), 'unicode')  native2unicode(hex2dec({'6d' '41'}), 'unicode')  native2unicode(hex2dec({'4f' '53'}), 'unicode')  native2unicode(hex2dec({'6d' '41'}), 'unicode')  native2unicode(hex2dec({'52' 'a8'}), 'unicode')  native2unicode(hex2dec({'53' 'd8'}), 'unicode')  native2unicode(hex2dec({'91' 'cf'}), 'unicode') ' (spf)']);
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label([native2unicode(hex2dec({'90' '1f'}), 'unicode')  native2unicode(hex2dec({'5e' 'a6'}), 'unicode') ' u' native2unicode(hex2dec({'ff' '0c'}), 'unicode')  native2unicode(hex2dec({'53' '8b'}), 'unicode')  native2unicode(hex2dec({'52' '9b'}), 'unicode') ' p']);
model.sol('sol1').feature('s1').feature('se1').set('maxsegiter', 200);
model.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s1').feature('se1').set('subinitcfl', 5);
model.sol('sol1').feature('s1').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s1').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s1').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s1').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label(['AMG' native2unicode(hex2dec({'ff' '0c'}), 'unicode')  native2unicode(hex2dec({'6d' '41'}), 'unicode')  native2unicode(hex2dec({'4f' '53'}), 'unicode')  native2unicode(hex2dec({'6d' '41'}), 'unicode')  native2unicode(hex2dec({'52' 'a8'}), 'unicode')  native2unicode(hex2dec({'53' 'd8'}), 'unicode')  native2unicode(hex2dec({'91' 'cf'}), 'unicode') ' (spf)']);
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label([native2unicode(hex2dec({'78' 'c1'}), 'unicode')  native2unicode(hex2dec({'90' '1a'}), 'unicode')  native2unicode(hex2dec({'5b' 'c6'}), 'unicode')  native2unicode(hex2dec({'5e' 'a6'}), 'unicode')  native2unicode(hex2dec({'6a' '21'}), 'unicode') ' (mef)']);
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('solutionparams', 'parent');
model.result('pg1').feature('mslc1').set('expr', 'mef.normB');
model.result('pg1').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('mslc1').set('xcoord', 'mef.CPx');
model.result('pg1').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('mslc1').set('ycoord', 'mef.CPy');
model.result('pg1').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('mslc1').set('zcoord', 'mef.CPz');
model.result('pg1').feature('mslc1').set('colortable', 'Prism');
model.result('pg1').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg1').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('strmsl1').set('xcoord', 'mef.CPx');
model.result('pg1').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('strmsl1').set('ycoord', 'mef.CPy');
model.result('pg1').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('strmsl1').set('zcoord', 'mef.CPz');
model.result('pg1').feature('strmsl1').set('titletype', 'none');
model.result('pg1').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg1').feature('strmsl1').set('udist', 0.02);
model.result('pg1').feature('strmsl1').set('maxlen', 0.4);
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('inheritcolor', false);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('data', 'parent');
model.result('pg1').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg1').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg1').feature('strmsl1').feature('col1').set('expr', 'mef.normB');
model.result('pg1').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg1').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label([native2unicode(hex2dec({'75' '35'}), 'unicode')  native2unicode(hex2dec({'52' 'bf'}), 'unicode') ' (mef)']);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');
model.result('pg2').feature.create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('solutionparams', 'parent');
model.result('pg2').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('mslc1').set('xcoord', 'mef.CPx');
model.result('pg2').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('mslc1').set('ycoord', 'mef.CPy');
model.result('pg2').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('mslc1').set('zcoord', 'mef.CPz');
model.result('pg2').feature('mslc1').set('colortable', 'Dipole');
model.result('pg2').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg2').feature('mslc1').set('data', 'parent');
model.result('pg2').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg2').feature('strmsl1').set('expr', {'mef.Ex' 'mef.Ey' 'mef.Ez'});
model.result('pg2').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg2').feature('strmsl1').set('xcoord', 'mef.CPx');
model.result('pg2').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg2').feature('strmsl1').set('ycoord', 'mef.CPy');
model.result('pg2').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg2').feature('strmsl1').set('zcoord', 'mef.CPz');
model.result('pg2').feature('strmsl1').set('titletype', 'none');
model.result('pg2').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg2').feature('strmsl1').set('udist', 0.02);
model.result('pg2').feature('strmsl1').set('maxlen', 0.4);
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('inheritcolor', false);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg2').feature('strmsl1').set('maxtime', Inf);
model.result('pg2').feature('strmsl1').set('data', 'parent');
model.result('pg2').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg2').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg2').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg2').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg2').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg2').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label([native2unicode(hex2dec({'90' '1f'}), 'unicode')  native2unicode(hex2dec({'5e' 'a6'}), 'unicode') ' (spf)']);
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg3').feature.create('slc1', 'Slice');
model.result('pg3').feature('slc1').label([native2unicode(hex2dec({'52' '07'}), 'unicode')  native2unicode(hex2dec({'97' '62'}), 'unicode') ]);
model.result('pg3').feature('slc1').set('showsolutionparams', 'on');
model.result('pg3').feature('slc1').set('expr', 'spf.U');
model.result('pg3').feature('slc1').set('smooth', 'internal');
model.result('pg3').feature('slc1').set('showsolutionparams', 'on');
model.result('pg3').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label([native2unicode(hex2dec({'59' '16'}), 'unicode')  native2unicode(hex2dec({'58' 'c1'}), 'unicode') ]);
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([6 8 9 19 22]);
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label([native2unicode(hex2dec({'53' '8b'}), 'unicode')  native2unicode(hex2dec({'52' '9b'}), 'unicode') ' (spf)']);
model.result('pg4').set('data', 'surf1');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'surf1');
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label([native2unicode(hex2dec({'88' '68'}), 'unicode')  native2unicode(hex2dec({'97' '62'}), 'unicode') ]);
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('expr', 'p');
model.result('pg4').feature('surf1').set('colortable', 'Dipole');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg4').feature('surf1').feature.create('tran1', 'Transparency');
model.result('pg1').run;
model.result.dataset.create('surf2', 'Surface');
model.result.dataset('surf2').selection.set([7]);
model.result.export.create('data1', 'Data');
model.result.export('data1').set('data', 'surf2');
model.result.export('data1').setIndex('expr', 'mef.Jx', 0);
model.result.export('data1').setIndex('unit', 'A/m^2', 0);
model.result.export('data1').setIndex('descr', [native2unicode(hex2dec({'75' '35'}), 'unicode')  native2unicode(hex2dec({'6d' '41'}), 'unicode')  native2unicode(hex2dec({'5b' 'c6'}), 'unicode')  native2unicode(hex2dec({'5e' 'a6'}), 'unicode')  native2unicode(hex2dec({'ff' '0c'}), 'unicode') 'x ' native2unicode(hex2dec({'52' '06'}), 'unicode')  native2unicode(hex2dec({'91' 'cf'}), 'unicode') ], 0);
model.result.export('data1').setIndex('expr', 'mef.Jy', 1);
model.result.export('data1').setIndex('unit', 'A/m^2', 1);
model.result.export('data1').setIndex('descr', [native2unicode(hex2dec({'75' '35'}), 'unicode')  native2unicode(hex2dec({'6d' '41'}), 'unicode')  native2unicode(hex2dec({'5b' 'c6'}), 'unicode')  native2unicode(hex2dec({'5e' 'a6'}), 'unicode')  native2unicode(hex2dec({'ff' '0c'}), 'unicode') 'y ' native2unicode(hex2dec({'52' '06'}), 'unicode')  native2unicode(hex2dec({'91' 'cf'}), 'unicode') ], 1);
model.result.export('data1').setIndex('expr', 'mef.Jz', 2);
model.result.export('data1').setIndex('unit', 'A/m^2', 2);
model.result.export('data1').setIndex('descr', [native2unicode(hex2dec({'75' '35'}), 'unicode')  native2unicode(hex2dec({'6d' '41'}), 'unicode')  native2unicode(hex2dec({'5b' 'c6'}), 'unicode')  native2unicode(hex2dec({'5e' 'a6'}), 'unicode')  native2unicode(hex2dec({'ff' '0c'}), 'unicode') 'z ' native2unicode(hex2dec({'52' '06'}), 'unicode')  native2unicode(hex2dec({'91' 'cf'}), 'unicode') ], 2);
model.result.export('data1').setIndex('expr', 'u', 3);
model.result.export('data1').setIndex('unit', 'm/s', 3);
model.result.export('data1').setIndex('descr', [native2unicode(hex2dec({'90' '1f'}), 'unicode')  native2unicode(hex2dec({'5e' 'a6'}), 'unicode')  native2unicode(hex2dec({'57' '3a'}), 'unicode')  native2unicode(hex2dec({'ff' '0c'}), 'unicode') 'x ' native2unicode(hex2dec({'52' '06'}), 'unicode')  native2unicode(hex2dec({'91' 'cf'}), 'unicode') ], 3);
model.result.export('data1').setIndex('expr', 'v', 4);
model.result.export('data1').setIndex('unit', 'm/s', 4);
model.result.export('data1').setIndex('descr', [native2unicode(hex2dec({'90' '1f'}), 'unicode')  native2unicode(hex2dec({'5e' 'a6'}), 'unicode')  native2unicode(hex2dec({'57' '3a'}), 'unicode')  native2unicode(hex2dec({'ff' '0c'}), 'unicode') 'y ' native2unicode(hex2dec({'52' '06'}), 'unicode')  native2unicode(hex2dec({'91' 'cf'}), 'unicode') ], 4);
model.result.export('data1').setIndex('expr', 'A*exp(-((x-x0)^2 + (y-y0)^2)[1/cm^2]/(2*sigma^2))', 5);
model.result.export('data1').setIndex('unit', '', 5);
model.result.export('data1').setIndex('descr', '', 5);

% path_result=['E:\DATA\MHD\data\' num2str(parm_NN) '.csv'];  %path_result
path_result=['data\' num2str(parm_NN) '.csv'];  %path_result
model.result.export('data1').set('filename', path_result);

model.result.export('data1').set('location', 'regulargrid');
model.result.export('data1').set('gridstruct', 'grid');
model.result.export('data1').set('regulargridx2', 128);
model.result.export('data1').set('regulargridy2', 128);
model.result.export('data1').run;


out = model;
